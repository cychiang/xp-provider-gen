{{ .Boilerplate }}

package {{ .Resource.Version }}

import (
	"reflect"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	xpv1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	xpv2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

// {{ .Resource.Kind }}Parameters are the configurable fields of a {{ .Resource.Kind }}.
// +kubebuilder:object:generate=true
type {{ .Resource.Kind }}Parameters struct {
	// TODO: Add your configurable fields here
	ConfigurableField string `json:"configurableField"`
}

// {{ .Resource.Kind }}Observation are the observable fields of a {{ .Resource.Kind }}.
// +kubebuilder:object:generate=true
type {{ .Resource.Kind }}Observation struct {
	// TODO: Add your observable fields here
	ConfigurableField string `json:"configurableField"`
	Status string `json:"status,omitempty"`
}

// A {{ .Resource.Kind }}Spec defines the desired state of a {{ .Resource.Kind }}.
// +kubebuilder:object:generate=true
type {{ .Resource.Kind }}Spec struct {
	xpv2.ManagedResourceSpec `json:",inline"`
	ForProvider              {{ .Resource.Kind }}Parameters `json:"forProvider"`
}

// A {{ .Resource.Kind }}Status represents the observed state of a {{ .Resource.Kind }}.
// +kubebuilder:object:generate=true
type {{ .Resource.Kind }}Status struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          {{ .Resource.Kind }}Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// A {{ .Resource.Kind }} is an example API type.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,{{ .ProviderName | lower }}},shortName={{ .Resource.Kind | lower }}
type {{ .Resource.Kind }} struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   {{ .Resource.Kind }}Spec   `json:"spec"`
	Status {{ .Resource.Kind }}Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// {{ .Resource.Kind }}List contains a list of {{ .Resource.Kind }}
type {{ .Resource.Kind }}List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []{{ .Resource.Kind }} `json:"items"`
}

// {{ .Resource.Kind }} type metadata.
var (
	{{ .Resource.Kind }}Kind             = reflect.TypeOf({{ .Resource.Kind }}{}).Name()
	{{ .Resource.Kind }}GroupKind        = schema.GroupKind{Group: Group, Kind: {{ .Resource.Kind }}Kind}.String()
	{{ .Resource.Kind }}KindAPIVersion   = {{ .Resource.Kind }}Kind + "." + CRDGroupVersion.String()
	{{ .Resource.Kind }}GroupVersionKind = CRDGroupVersion.WithKind({{ .Resource.Kind }}Kind)
)

func init() {
	SchemeBuilder.Register(&{{ .Resource.Kind }}{}, &{{ .Resource.Kind }}List{})
}
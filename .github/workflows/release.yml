name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.25.1'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Build release binaries
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        mkdir -p dist

        # Define build targets
        declare -a targets=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
        )

        for target in "${targets[@]}"; do
          GOOS=${target%/*}
          GOARCH=${target#*/}

          BINARY_NAME=xp-provider-gen
          if [ "${GOOS}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          OUTPUT_PATH="dist/${BINARY_NAME}_${GOOS}_${GOARCH}"
          if [ "${GOOS}" = "windows" ]; then
            OUTPUT_PATH="${OUTPUT_PATH}.exe"
          fi

          echo "Building ${GOOS}/${GOARCH}..."
          GOOS=${GOOS} GOARCH=${GOARCH} go build \
            -ldflags "-X github.com/cychiang/xp-provider-gen/pkg/version.Version=${VERSION} -X github.com/cychiang/xp-provider-gen/pkg/version.GitCommit=${GITHUB_SHA} -X github.com/cychiang/xp-provider-gen/pkg/version.BuildDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            -trimpath \
            -o "${OUTPUT_PATH}" \
            ./cmd/xp-provider-gen

          # Create archive
          ARCHIVE_NAME="xp-provider-gen_${VERSION}_${GOOS}_${GOARCH}"
          if [ "${GOOS}" = "windows" ]; then
            zip "${ARCHIVE_NAME}.zip" -j "${OUTPUT_PATH}"
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" -C dist "$(basename "${OUTPUT_PATH}")"
          fi

          # Create checksum
          if [ "${GOOS}" = "windows" ]; then
            sha256sum "${ARCHIVE_NAME}.zip" > "${ARCHIVE_NAME}.zip.sha256"
          else
            sha256sum "${ARCHIVE_NAME}.tar.gz" > "${ARCHIVE_NAME}.tar.gz.sha256"
          fi
        done

    - name: Generate changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since ${PREVIOUS_TAG}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: CHANGELOG.md
        files: |
          *.tar.gz
          *.zip
          *.sha256
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-release:
    name: Release Docker Image
    runs-on: ubuntu-latest
    needs: release

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
          BUILD_DATE=${{ steps.meta.outputs.created }}